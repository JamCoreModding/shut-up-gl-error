plugins {
    id "java"
    id "idea"
    id "fabric-loom"
    {{#if unified_publishing}}
    id "me.shedaniel.unified-publishing"
    {{/if}}
}

base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api
    implementation project(":common")

    modLocalRuntime libs.modmenu
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}
{{#if unified_publishing}}

if (System.getenv("CURSEFORGE_API_KEY") != null && System.getenv("MODRINTH_API_KEY") != null) {
// Uncomment these lines and fill in the IDs when ready to publish :)
//    unifiedPublishing {
//        project {
//            displayName = "V${project.version} (Fabric ${project.minecraft_version})"
//            changelog = rootProject.file("CHANGELOG.md").text
//            releaseType = project.version.contains("beta") ? "beta" : "release"
//            gameVersions = [project.minecraft_version]
//            gameLoaders = ["fabric", "quilt"]

//            mainPublication tasks.remapJar

//            curseforge {
//                token = System.getenv("CURSEFORGE_API_KEY")
//                id = ""
//            }

//            modrinth {
//                token = System.getenv("MODRINTH_API_KEY")
//                id = ""
//            }
//        }
//    }
}
{{/if}}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}
